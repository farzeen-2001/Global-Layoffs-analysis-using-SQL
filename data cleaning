-- create new table to avoid the raw table getting affected 
CREATE TABLE layoffs_staging
LIKE layoffs; 

SELECT * 
FROM layoffs_staging; 

-- insert data from layoffs 
 
INSERT layoffs_staging
SELECT *
FROM layoffs;

SELECT * 
FROM layoffs_staging; 

-- removing duplicates using row number and partition
 
SELECT * ,
row_number() over(
partition by country,location,industry,total_laid_off,percentage_laid_off,`date`) as row_num
FROM layoffs_staging; 

-- using cte to filter out the duplicates so when the row num is greater than 2 then it has duplicates

with duplicate_cte as
(SELECT * ,
row_number() over(
partition by country,location,industry,total_laid_off,percentage_laid_off,`date`,stage,country,funds_raised_millions) as row_num
FROM layoffs_staging
) 
select * 
from duplicate_cte
where row_num >1;


-- checking the duplicates

select *
from layoffs_staging
where company='Casper';


-- in mysql we cannt delete duplicates completely from table

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select *
from layoffs_staging2;


insert into layoffs_staging2
SELECT * ,
row_number() over(
partition by country,location,industry,total_laid_off,percentage_laid_off,`date`,stage,country,funds_raised_millions) as row_num
FROM layoffs_staging;


select *
from layoffs_staging2
where row_num>1;

delete
from layoffs_staging2
where row_num>1;

select *
from layoffs_staging2
where row_num>1;


-- standardizing data

select distinct(company)
from layoffs_staging2; 

-- trim takes off the space

update layoffs_staging2
set company = trim(company); 

select * 
from layoffs_staging2;

select distinct industry
from layoffs_staging2
order by 1;  					-- order by used for sequencing 


select *
from layoffs_staging2
where industry like 'Crypto%';

-- updating the table with crypto instead of cryptocurrency

update layoffs_staging2
set industry = 'Crypto'
where industry like 'Crypto%';

select distinct country   
from layoffs_staging2;

-- as US needs to be trim but trimiming didnt helped much so we will use trailing that takes out the end objects

select distinct country ,trim(trailing '.' from country)
from layoffs_staging2
order by 1;

update layoffs_staging2
set country = trim(trailing '.' from country)
where country like 'United States%';

-- changing the date data type from text

select `date`
from layoffs_staging2;


select `date`,
STR_TO_DATE(`date`,'%m/%d/%Y')
from layoffs_staging2;

update layoffs_staging2
set `date` = STR_TO_DATE(`date`,'%m/%d/%Y')
;

--  after updating it shows date data type as text, now we can modify to date data type

alter table layoffs_staging2
modify column `date` DATE;

Select *
from layoffs_staging2;

-- removing null and blank values

Select *
from layoffs_staging2
where total_laid_off is null
and percentage_laid_off is null;

-- there were null value industry as well 

select *
from layoffs_staging2
where industry is null 
or industry = '';

update layoffs_staging2
set industry = NULL
WHERE industry ='';


select *
from layoffs_staging2
where company  like 'Bally%';


select *
from layoffs_staging2 t1
join layoffs_staging2 t2
	on t1.company = t2.company
where (t1.industry is null or t1.industry ='')
and t2.industry is not null;

select t1.industry,t2.industry
from layoffs_staging2 t1
join layoffs_staging2 t2
	on t1.company = t2.company
where (t1.industry is null or t1.industry ='')
and t2.industry is not null;



update layoffs_staging2 t1
join layoffs_staging2 t2
	on t1.company = t2.company
set t1.industry = t2.industry
where t1.industry is null 
and t2.industry is not null;


select *
from layoffs_staging2;

Select *
from layoffs_staging2
where total_laid_off is null
and percentage_laid_off is null;

delete 
from layoffs_staging2
where total_laid_off is null
and percentage_laid_off is null;

alter table layoffs_staging2
drop column row_num;
